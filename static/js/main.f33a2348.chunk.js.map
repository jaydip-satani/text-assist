{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","data-bs-theme","mode","aria-current","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","onClick","toggleMode","role","htmlFor","TextForm","text","setText","useState","Fragment","style","color","heading","value","backgroundColor","onChange","event","target","rows","handleUpClick","newText","toUpperCase","showAlert","handleLwClick","toLowerCase","handleClearClick","handleSaveClick","blob","Blob","link","document","URL","createObjectURL","download","click","length","split","Alert","alert","word","lower","charAt","slice","capitalize","message","App","setMode","setAlert","setTimeout","about","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"kNAEe,SAASA,EAAOC,GAC3B,OACIC,IAAAC,cAAA,OAAKC,UAAU,2CAA2CC,gBAAeJ,EAAMK,MAC3EJ,IAAAC,cAAA,OAAKC,UAAU,mBAEXF,IAAAC,cAAA,KAAGC,UAAU,eAAeG,eAAa,OAAOC,KAAK,KAAKP,EAAMQ,OAChEP,IAAAC,cAAA,UAAQC,UAAU,iBAAiBM,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACxLb,IAAAC,cAAA,QAAMC,UAAU,yBAEpBF,IAAAC,cAAA,OAAKC,UAAU,2BAA2BY,GAAG,0BACzCd,IAAAC,cAAA,MAAIC,UAAU,mCACVF,IAAAC,cAAA,MAAIC,UAAU,YACVF,IAAAC,cAAA,KAAGC,UAAU,kBAAkBG,eAAa,OAAOC,KAAK,KAAI,UAMpEN,IAAAC,cAAA,OAAKC,UAAW,gCAA8C,UAAfH,EAAMK,KAAmB,OAAS,UAC7EJ,IAAAC,cAAA,SAAOC,UAAU,mBAAmBa,QAAShB,EAAMiB,WAAYR,KAAK,WAAWS,KAAK,SAASH,GAAG,2BAChGd,IAAAC,cAAA,SAAOC,UAAU,mBAAmBgB,QAAQ,0BAAyB,wBCrB9E,SAASC,EAASpB,GAC7B,MAyBOqB,EAAMC,GAAWC,mBAAS,IACjC,OACItB,IAAAC,cAAAD,IAAAuB,SAAA,KACIvB,IAAAC,cAAA,OAAKC,UAAU,YAAYsB,MAAO,CAAEC,MAAsB,SAAf1B,EAAMK,KAAkB,QAAU,SACzEJ,IAAAC,cAAA,UAAKF,EAAM2B,SACX1B,IAAAC,cAAA,OAAKC,UAAU,QACXF,IAAAC,cAAA,YAAUC,UAAU,eAAeyB,MAAOP,EACtCI,MAAO,CAAEI,gBAAgC,SAAf7B,EAAMK,KAAkB,OAAS,QAASqB,MAAsB,SAAf1B,EAAMK,KAAkB,QAAU,QAAUyB,SAVnHC,IACpBT,EAAQS,EAAMC,OAAOJ,QAS4Ib,GAAG,kBAAkBkB,KAAK,OAEnLhC,IAAAC,cAAA,UAAQC,UAAU,wBAAwBa,QAlChCkB,KAClB,IAAIC,EAAUd,EAAKe,cACnBd,EAAQa,GACRnC,EAAMqC,UAAU,0BAA2B,aA+B+B,yBAClEpC,IAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QA9B/BsB,KAClB,IAAIH,EAAUd,EAAKkB,cACnBjB,EAAQa,GACRnC,EAAMqC,UAAU,0BAA2B,aA2B8B,yBACjEpC,IAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QA1B5BwB,KACrBlB,EAAQ,IACRtB,EAAMqC,UAAU,gBAAiB,aAwB2C,cACpEpC,IAAAC,cAAA,UAAQC,UAAU,uBAAuBa,QAvB7ByB,KACpB,MAAMC,EAAO,IAAIC,KAAK,CAACtB,GAAO,CAAEZ,KAAM,6BAChCmC,EAAOC,SAAS3C,cAAc,KACpC0C,EAAKrC,KAAOuC,IAAIC,gBAAgBL,GAChCE,EAAKI,SAAW,eAChBJ,EAAKK,QACLjD,EAAMqC,UAAU,cAAe,aAiB4C,cAEvEpC,IAAAC,cAAA,OAAKC,UAAU,iBAAiBsB,MAAO,CAAEC,MAAsB,SAAf1B,EAAMK,KAAkB,QAAU,SAC9EJ,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,SACqB,IAAhBmB,EAAK6B,OAAe7B,EAAK6B,OAAS7B,EAAK8B,MAAM,KAAKD,OAAO,YAAU7B,EAAK6B,OAAO,eAEpFjD,IAAAC,cAAA,SACK,KAAQmB,EAAK8B,MAAM,KAAKD,OAAO,iBAEpCjD,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,SAAImB,EAAK6B,OAAS,EAAI7B,EAAO,gCChD9B,SAAS+B,EAAMpD,GAK1B,OACIA,EAAMqD,OAASpD,IAAAC,cAAA,OAAKC,UAAW,eAAeH,EAAMqD,MAAM5C,mCACxDS,KAAK,SACHjB,IAAAC,cAAA,cAPYoD,KAChB,MAAMC,EAAQD,EAAKf,cACnB,OAAOgB,EAAMC,OAAO,GAAGpB,cAAgBmB,EAAME,MAAM,IAKtCC,CAAW1D,EAAMqD,MAAMM,WC4C7BC,MA/Cf,WACE,MAAOvD,EAAMwD,GAAWtC,mBAAS,UAC1B8B,EAAOS,GAAYvC,mBAAS,MAE7Bc,EAAYA,CAACsB,EAASlD,KAC1BqD,EAAS,CACPH,QAASA,EACTlD,KAAMA,IAERsD,WAAW,KACTD,EAAS,OACR,MAcL,OACE7D,IAAAC,cAAAD,IAAAuB,SAAA,KAEEvB,IAAAC,cAACH,EAAM,CAACiE,MAAM,QAAQxD,MAAM,aAAaH,KAAMA,EAAMY,WAftCA,KACJ,UAATZ,GACFwD,EAAQ,QACRhB,SAASoB,KAAKxC,MAAMI,gBAAkB,UACtCQ,EAAU,6BAA8B,aAGxCwB,EAAQ,SACRhB,SAASoB,KAAKxC,MAAMI,gBAAkB,QACtCQ,EAAU,8BAA+B,eAOzCpC,IAAAC,cAAA,WACED,IAAAC,cAACkD,EAAK,CAACC,MAAOA,KAOhBpD,IAAAC,cAAA,OAAKC,UAAU,6BACbF,IAAAC,cAACkB,EAAQ,CAACiB,UAAWA,EAAWV,QAAQ,kCAAkCtB,KAAMA,OCjCzE6D,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWhC,SAASiC,eAAe,SACpDC,OACH9E,IAAAC,cAACD,IAAM+E,WAAU,KACf/E,IAAAC,cAAC0D,EAAG,QAORM,K","file":"static/js/main.f33a2348.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg bg-body-tertiary\" data-bs-theme={props.mode}>\r\n            <div className=\"container-fluid\">\r\n                {/* <a className=\"navbar-brand\" href=\"#\">{props.title}</a> */}\r\n                <a className=\"navbar-brand\" aria-current=\"page\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/about\">{props.about}</a>\r\n                        </li> */}\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckChecked\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav >\r\n    );\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to uppercase!\", \"success\")\r\n    }\r\n    const handleLwClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to lowercase!\", \"success\")\r\n    }\r\n    const handleClearClick = () => {\r\n        setText('')\r\n        props.showAlert(\"cleared text!\", \"success\")\r\n    }\r\n    const handleSaveClick = () => {\r\n        const blob = new Blob([text], { type: 'text/plain;charset=utf-8' });\r\n        const link = document.createElement('a');\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = 'textfile.txt';\r\n        link.click();\r\n        props.showAlert(\"saved filed\", \"success\")\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className='container' style={{ color: props.mode === 'dark' ? 'white' : 'grey' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text}\r\n                        style={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : 'grey' }} onChange={handleOnChange} id=\"inputTextToSave\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2 \" onClick={handleUpClick}>Convert to Upper case</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleLwClick}>Convert to Lower case</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleSaveClick}>Save Text</button>\r\n            </div>\r\n            <div className=\"container my-2\" style={{ color: props.mode === 'dark' ? 'white' : 'grey' }}>\r\n                <h1>Your text summary</h1>\r\n                <p>\r\n                    {text.length === 0 ? text.length : text.split(\" \").length} words , {text.length} characters\r\n                </p>\r\n                <p>\r\n                    {0.008 * text.split(\" \").length} Minutes read\r\n                </p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : 'Enter Your Text To Preview'}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`\r\n        } role=\"alert\" >\r\n            <strong>{capitalize(props.alert.message)}</strong>\r\n        </div >\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import About from './components/About';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1000);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = '#042743'\n      showAlert(\"dark mode has been enabled\", \"success\")\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"light mode has been enabled\", \"success\")\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar about='hello' title='textAssist' mode={mode} toggleMode={toggleMode} />\n      <div>\n        <Alert alert={alert} />\n      </div>\n      {/* <Routes> */}\n      {/* <Route exact path=\"/about\" element={ */}\n      {/* <About mode={mode} /> */}\n      {/* } /> */}\n      {/* <Route exact path=\"/\" element={ */}\n      <div className=\"container my-3 align-item\">\n        <TextForm showAlert={showAlert} heading='Enter the text to analyse below' mode={mode} />\n      </div>\n      {/* } /> */}\n      {/* </Routes >\n      </Router > */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}